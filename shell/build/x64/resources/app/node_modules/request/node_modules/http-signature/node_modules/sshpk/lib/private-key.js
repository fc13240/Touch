function PrivateKey(e){assert.object(e,"options"),Key.call(this,e),this._pubCache=void 0}module.exports=PrivateKey;var assert=require("assert-plus"),algs=require("./algs"),crypto=require("crypto"),Fingerprint=require("./fingerprint"),Signature=require("./signature"),errs=require("./errors"),util=require("util"),utils=require("./utils"),edCompat,ed;try{edCompat=require("./ed-compat")}catch(e){}var Key=require("./key"),InvalidAlgorithmError=errs.InvalidAlgorithmError,KeyParseError=errs.KeyParseError,formats={};formats.auto=require("./formats/auto"),formats.pem=require("./formats/pem"),formats.pkcs1=require("./formats/pkcs1"),formats.pkcs8=require("./formats/pkcs8"),formats.rfc4253=require("./formats/rfc4253"),formats["ssh-private"]=require("./formats/ssh-private"),formats.openssh=formats["ssh-private"],formats.ssh=formats["ssh-private"],util.inherits(PrivateKey,Key),PrivateKey.formats=formats,PrivateKey.prototype.toBuffer=function(e){return void 0===e&&(e="pkcs1"),assert.string(e,"format"),assert.object(formats[e],"formats[format]"),formats[e].write(this)},PrivateKey.prototype.hash=function(e){return this.toPublic().hash(e)},PrivateKey.prototype.toPublic=function(){if(this._pubCache)return this._pubCache;for(var e=algs.info[this.type],r=[],t=0;t<e.parts.length;++t){var i=e.parts[t];r.push(this.part[i])}return this._pubCache=new Key({type:this.type,source:this,parts:r}),this.comment&&(this._pubCache.comment=this.comment),this._pubCache},PrivateKey.prototype.derive=function(e,r){assert.string(e,"type"),assert.optionalNumber(r,"size");var t,i;if("ed25519"===this.type&&"curve25519"===e)return void 0===ed&&(ed=require("jodid25519")),t=this.part.r.data,0===t[0]&&(t=t.slice(1)),t=t.slice(0,32),i=ed.dh.publicKey(t),t=utils.mpNormalize(Buffer.concat([t,i])),new PrivateKey({type:"curve25519",parts:[{name:"R",data:utils.mpNormalize(i)},{name:"r",data:t}]});if("curve25519"===this.type&&"ed25519"===e)return void 0===ed&&(ed=require("jodid25519")),t=this.part.r.data,0===t[0]&&(t=t.slice(1)),t=t.slice(0,32),i=ed.eddsa.publicKey(t.toString("binary")),i=new Buffer(i,"binary"),t=utils.mpNormalize(Buffer.concat([t,i])),new PrivateKey({type:"ed25519",parts:[{name:"R",data:utils.mpNormalize(i)},{name:"r",data:t}]});throw new Error("Key derivation not supported from "+this.type+" to "+e)},PrivateKey.prototype.createVerify=function(e){return this.toPublic().createVerify(e)},PrivateKey.prototype.createSign=function(e){if(void 0===e&&(e=this.defaultHashAlgorithm()),assert.string(e,"hash algorithm"),"ed25519"===this.type&&void 0!==edCompat)return new edCompat.Signer(this,e);if("curve25519"===this.type)throw new Error("Curve25519 keys are not suitable for signing or verification");var r,t,i;try{t=this.type.toUpperCase()+"-","ecdsa"===this.type&&(t="ecdsa-with-"),t+=e.toUpperCase(),r=crypto.createSign(t)}catch(a){i=a}(void 0===r||i instanceof Error&&i.message.match(/Unknown message digest/))&&(t="RSA-",t+=e.toUpperCase(),r=crypto.createSign(t)),assert.ok(r,"failed to create verifier");var s=r.sign.bind(r),o=this.toBuffer("pkcs1"),n=this.type;return r.sign=function(){var r=s(o);return"string"==typeof r&&(r=new Buffer(r,"binary")),r=Signature.parse(r,n,"asn1"),r.hashAlgorithm=e,r},r},PrivateKey.parse=function(e,r,t){"string"!=typeof e&&assert.buffer(e,"data"),void 0===r&&(r="auto"),assert.string(r,"format"),void 0===t&&(t="(unnamed)"),assert.object(formats[r],"formats[format]");try{var i=formats[r].read(e);return assert.ok(i instanceof PrivateKey,"key is not a private key"),i.comment||(i.comment=t),i}catch(a){throw new KeyParseError(t,r,a)}},PrivateKey.isPrivateKey=function(e,r){return utils.isCompatible(e,PrivateKey,r)},PrivateKey.prototype._sshpkApiVersion=[1,4],PrivateKey._oldVersionDetect=function(e){return assert.func(e.toPublic),assert.func(e.createSign),e.derive?[1,3]:e.defaultHashAlgorithm?[1,2]:e.formats.auto?[1,1]:[1,0]};