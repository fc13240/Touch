function HttpSignatureError(r,t){Error.captureStackTrace&&Error.captureStackTrace(this,t||HttpSignatureError),this.message=r,this.name=t.name}function InvalidAlgorithmError(r){HttpSignatureError.call(this,r,InvalidAlgorithmError)}function validateAlgorithm(r){var t=r.toLowerCase().split("-");if(2!==t.length)throw new InvalidAlgorithmError(t[0].toUpperCase()+" is not a valid algorithm");if("hmac"!==t[0]&&!PK_ALGOS[t[0]])throw new InvalidAlgorithmError(t[0].toUpperCase()+" type keys are not supported");if(!HASH_ALGOS[t[1]])throw new InvalidAlgorithmError(t[1].toUpperCase()+" is not a supported hash algorithm");return t}var assert=require("assert-plus"),sshpk=require("sshpk"),util=require("util"),HASH_ALGOS={sha1:!0,sha256:!0,sha512:!0},PK_ALGOS={rsa:!0,dsa:!0,ecdsa:!0};util.inherits(HttpSignatureError,Error),util.inherits(InvalidAlgorithmError,HttpSignatureError),module.exports={HASH_ALGOS:HASH_ALGOS,PK_ALGOS:PK_ALGOS,HttpSignatureError:HttpSignatureError,InvalidAlgorithmError:InvalidAlgorithmError,validateAlgorithm:validateAlgorithm,sshKeyToPEM:function(r){assert.string(r,"ssh_key");var t=sshpk.parseKey(r,"ssh");return t.toString("pem")},fingerprint:function(r){assert.string(r,"ssh_key");var t=sshpk.parseKey(r,"ssh");return t.fingerprint("md5").toString("hex")},pemToRsaSSHKey:function(r,t){assert.equal("string",typeof r,"typeof pem");var e=sshpk.parseKey(r,"pem");return e.comment=t,e.toString("ssh")}};