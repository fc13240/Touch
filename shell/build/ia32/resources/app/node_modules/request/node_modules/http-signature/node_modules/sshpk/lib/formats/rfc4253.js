function algToKeyType(e){if(assert.string(e),"ssh-dss"===e)return"dsa";if("ssh-rsa"===e)return"rsa";if("ssh-ed25519"===e)return"ed25519";if("ssh-curve25519"===e)return"curve25519";if(e.match(/^ecdsa-sha2-/))return"ecdsa";throw new Error("Unknown algorithm "+e)}function keyTypeToAlg(e){if(assert.object(e),"dsa"===e.type)return"ssh-dss";if("rsa"===e.type)return"ssh-rsa";if("ed25519"===e.type)return"ssh-ed25519";if("curve25519"===e.type)return"ssh-curve25519";if("ecdsa"===e.type)return"ecdsa-sha2-"+e.part.curve.data.toString();throw new Error("Unknown key type "+e.type)}function read(e,r,t){"string"==typeof t&&(t=new Buffer(t)),assert.buffer(t,"buf");var a={},s=a.parts=[],n=new SSHBuffer({buffer:t}),i=n.readString();assert.ok(!n.atEnd(),"key must have at least one part"),a.type=algToKeyType(i);var o=algs.info[a.type].parts.length;for(r&&"private"===r&&(o=algs.privInfo[a.type].parts.length);!n.atEnd()&&s.length<o;)s.push(n.readPart());for(;!e&&!n.atEnd();)s.push(n.readPart());assert.ok(s.length>=1,"key must have at least one part"),assert.ok(e||n.atEnd(),"leftover bytes at end of key");var f=Key,u=algs.info[a.type];if(("private"===r||u.parts.length!==s.length)&&(u=algs.privInfo[a.type],f=PrivateKey),assert.strictEqual(u.parts.length,s.length),"ecdsa"===a.type){var p=/^ecdsa-sha2-(.+)$/.exec(i);assert.ok(null!==p),assert.strictEqual(p[1],s[0].data.toString())}for(var d=!0,y=0;y<u.parts.length;++y)if(s[y].name=u.parts[y],"curve"!==s[y].name&&u.normalize!==!1){var l=s[y],g=utils.mpNormalize(l.data);g!==l.data&&(l.data=g,d=!1)}return d&&(a._rfc4253Cache=n.toBuffer()),e&&"object"==typeof e&&(e.remainder=n.remainder(),e.consumed=n._offset),new f(a)}function write(e){assert.object(e);var r,t=keyTypeToAlg(e),a=algs.info[e.type];PrivateKey.isPrivateKey(e)&&(a=algs.privInfo[e.type]);var s=a.parts,n=new SSHBuffer({});for(n.writeString(t),r=0;r<s.length;++r){var i=e.part[s[r]].data;a.normalize!==!1&&(i=utils.mpNormalize(i)),n.writeBuffer(i)}return n.toBuffer()}module.exports={read:read.bind(void 0,!1,void 0),readType:read.bind(void 0,!1),write:write,readPartial:read.bind(void 0,!0),readInternal:read,keyTypeToAlg:keyTypeToAlg,algToKeyType:algToKeyType};var assert=require("assert-plus"),algs=require("../algs"),utils=require("../utils"),Key=require("../key"),PrivateKey=require("../private-key"),SSHBuffer=require("../ssh-buffer");