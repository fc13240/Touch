function read(e){"string"!=typeof e&&(assert.buffer(e,"buf"),e=e.toString("ascii"));var r=e.trim().replace(/[\\\r]/g,""),t=r.match(SSHKEY_RE);t||(t=r.match(SSHKEY_RE2)),assert.ok(t,"key must match regex");var a,s=rfc4253.algToKeyType(t[1]),c=new Buffer(t[2],"base64"),i={};if(t[4])try{a=rfc4253.read(c)}catch(u){t=r.match(SSHKEY_RE2),assert.ok(t,"key must match regex"),c=new Buffer(t[2],"base64"),a=rfc4253.readInternal(i,"public",c)}else a=rfc4253.readInternal(i,"public",c);if(assert.strictEqual(s,a.type),t[4]&&t[4].length>0)a.comment=t[4];else if(i.consumed){var n=t[2]+t[3],f=4*Math.ceil(i.consumed/3);n=n.slice(0,f-2).replace(/[^a-zA-Z0-9+\/=]/g,"")+n.slice(f-2);var l=i.consumed%3;for(l>0&&"="!==n.slice(f-1,f)&&f--;"="===n.slice(f,f+1);)f++;var o=n.slice(f);o=o.replace(/[\r\n]/g," ").replace(/^\s+/,""),o.match(/^[a-zA-Z0-9]/)&&(a.comment=o)}return a}function write(e){if(assert.object(e),!Key.isKey(e))throw new Error("Must be a public key");var r=[],t=rfc4253.keyTypeToAlg(e);r.push(t);var a=rfc4253.write(e);return r.push(a.toString("base64")),e.comment&&r.push(e.comment),new Buffer(r.join(" "))}module.exports={read:read,write:write};var assert=require("assert-plus"),rfc4253=require("./rfc4253"),utils=require("../utils"),Key=require("../key"),PrivateKey=require("../private-key"),sshpriv=require("./ssh-private"),SSHKEY_RE=/^([a-z0-9-]+)[ \t]+([a-zA-Z0-9+\/]+[=]*)([\n \t]+([^\n]+))?$/,SSHKEY_RE2=/^([a-z0-9-]+)[ \t]+([a-zA-Z0-9+\/ \t\n]+[=]*)(.*)$/;