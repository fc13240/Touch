function Signature(r){assert.object(r,"options"),assert.arrayOfObject(r.parts,"options.parts"),assert.string(r.type,"options.type");for(var e={},t=0;t<r.parts.length;++t){var a=r.parts[t];e[a.name]=a}this.type=r.type,this.hashAlgorithm=r.hashAlgo,this.parts=r.parts,this.part=e}function parseOneNum(r,e,t,a,s){if("ssh"===t){try{var n=new SSHBuffer({buffer:r}),i=n.readString()}catch(u){}if(i===s){var f=n.readPart();return assert.ok(n.atEnd(),"extra trailing bytes"),f.name="sig",a.parts.push(f),new Signature(a)}}return a.parts.push({name:"sig",data:r}),new Signature(a)}function parseDSAasn1(r,e,t,a){var s=new asn1.BerReader(r);s.readSequence();var n=s.readString(asn1.Ber.Integer,!0),i=s.readString(asn1.Ber.Integer,!0);return a.parts.push({name:"r",data:utils.mpNormalize(n)}),a.parts.push({name:"s",data:utils.mpNormalize(i)}),new Signature(a)}function parseDSA(r,e,t,a){if(40!=r.length){var s=new SSHBuffer({buffer:r}),n=s.readBuffer();"ssh-dss"===n.toString("ascii")&&(n=s.readBuffer()),assert.ok(s.atEnd(),"extra trailing bytes"),assert.strictEqual(n.length,40,"invalid inner length"),r=n}return a.parts.push({name:"r",data:r.slice(0,20)}),a.parts.push({name:"s",data:r.slice(20,40)}),new Signature(a)}function parseECDSA(r,e,t,a){var s,n,i=new SSHBuffer({buffer:r}),u=i.readBuffer();return u.toString("ascii").match(/^ecdsa-/)?(u=i.readBuffer(),assert.ok(i.atEnd(),"extra trailing bytes on outer"),i=new SSHBuffer({buffer:u}),s=i.readPart()):s={data:u},n=i.readPart(),assert.ok(i.atEnd(),"extra trailing bytes"),s.name="r",n.name="s",a.parts.push(s),a.parts.push(n),new Signature(a)}module.exports=Signature;var assert=require("assert-plus"),algs=require("./algs"),crypto=require("crypto"),errs=require("./errors"),utils=require("./utils"),asn1=require("asn1"),SSHBuffer=require("./ssh-buffer"),InvalidAlgorithmError=errs.InvalidAlgorithmError,SignatureParseError=errs.SignatureParseError;Signature.prototype.toBuffer=function(r){void 0===r&&(r="asn1"),assert.string(r,"format");var e;switch(this.type){case"rsa":case"ed25519":return"ssh"===r?(e=new SSHBuffer({}),e.writeString("ssh-"+this.type),e.writePart(this.part.sig),e.toBuffer()):this.part.sig.data;case"dsa":case"ecdsa":var t,a;if("asn1"===r){var s=new asn1.BerWriter;return s.startSequence(),t=utils.mpNormalize(this.part.r.data),a=utils.mpNormalize(this.part.s.data),s.writeBuffer(t,asn1.Ber.Integer),s.writeBuffer(a,asn1.Ber.Integer),s.endSequence(),s.buffer}if("ssh"===r&&"dsa"===this.type)return e=new SSHBuffer({}),e.writeString("ssh-dss"),t=this.part.r.data,0===t[0]&&(t=t.slice(1)),a=this.part.s.data,e.writeBuffer(Buffer.concat([t,a])),e.toBuffer();if("ssh"===r&&"ecdsa"===this.type){var n=new SSHBuffer({});t=this.part.r,0===t[0]&&(t=t.slice(1)),n.writePart(t),n.writePart(this.part.s),e=new SSHBuffer({});var i,u=8*this.part.r.data.length;return 256===u?i="nistp256":384===u?i="nistp384":528===u&&(i="nistp521"),e.writeString("ecdsa-sha2-"+i),e.writeBuffer(n.toBuffer()),e.toBuffer()}throw new Error("Invalid signature format");default:throw new Error("Invalid signature data")}},Signature.prototype.toString=function(r){return assert.optionalString(r,"format"),this.toBuffer(r).toString("base64")},Signature.parse=function(r,e,t){"string"==typeof r&&(r=new Buffer(r,"base64")),assert.buffer(r,"data"),assert.string(t,"format"),assert.string(e,"type");var a={};a.type=e.toLowerCase(),a.parts=[];try{switch(assert.ok(r.length>0,"signature must not be empty"),a.type){case"rsa":return parseOneNum(r,e,t,a,"ssh-rsa");case"ed25519":return parseOneNum(r,e,t,a,"ssh-ed25519");case"dsa":case"ecdsa":return"asn1"===t?parseDSAasn1(r,e,t,a):"dsa"===a.type?parseDSA(r,e,t,a):parseECDSA(r,e,t,a);default:throw new InvalidAlgorithmError(e)}}catch(s){if(s instanceof InvalidAlgorithmError)throw s;throw new SignatureParseError(e,t,s)}},Signature.isSignature=function(r,e){return utils.isCompatible(r,Signature,e)},Signature.prototype._sshpkApiVersion=[2,1],Signature._oldVersionDetect=function(r){return assert.func(r.toBuffer),r.hasOwnProperty("hashAlgorithm")?[2,0]:[1,0]};