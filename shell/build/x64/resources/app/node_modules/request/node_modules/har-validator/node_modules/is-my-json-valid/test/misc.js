var tape=require("tape"),cosmic=require("./fixtures/cosmic"),validator=require("../"),validatorRequire=require("../require");tape("simple",function(e){var t={required:!0,type:"object",properties:{hello:{type:"string",required:!0}}},r=validator(t);e.ok(r({hello:"world"}),"should be valid"),e.notOk(r(),"should be invalid"),e.notOk(r({}),"should be invalid"),e.end()}),tape("advanced",function(e){var t=validator(cosmic.schema);e.ok(t(cosmic.valid),"should be valid"),e.notOk(t(cosmic.invalid),"should be invalid"),e.end()}),tape("greedy/false",function(e){var t=validator({type:"object",properties:{x:{type:"number"}},required:["x","y"]});e.notOk(t({}),"should be invalid"),e.strictEqual(t.errors.length,2),e.strictEqual(t.errors[0].field,"data.x"),e.strictEqual(t.errors[0].message,"is required"),e.strictEqual(t.errors[1].field,"data.y"),e.strictEqual(t.errors[1].message,"is required"),e.notOk(t({x:"string"}),"should be invalid"),e.strictEqual(t.errors.length,1),e.strictEqual(t.errors[0].field,"data.y"),e.strictEqual(t.errors[0].message,"is required"),e.notOk(t({x:"string",y:"value"}),"should be invalid"),e.strictEqual(t.errors.length,1),e.strictEqual(t.errors[0].field,"data.x"),e.strictEqual(t.errors[0].message,"is the wrong type"),e.end()}),tape("greedy/true",function(e){var t=validator({type:"object",properties:{x:{type:"number"}},required:["x","y"]},{greedy:!0});e.notOk(t({}),"should be invalid"),e.strictEqual(t.errors.length,2),e.strictEqual(t.errors[0].field,"data.x"),e.strictEqual(t.errors[0].message,"is required"),e.strictEqual(t.errors[1].field,"data.y"),e.strictEqual(t.errors[1].message,"is required"),e.notOk(t({x:"string"}),"should be invalid"),e.strictEqual(t.errors.length,2),e.strictEqual(t.errors[0].field,"data.y"),e.strictEqual(t.errors[0].message,"is required"),e.strictEqual(t.errors[1].field,"data.x"),e.strictEqual(t.errors[1].message,"is the wrong type"),e.notOk(t({x:"string",y:"value"}),"should be invalid"),e.strictEqual(t.errors.length,1),e.strictEqual(t.errors[0].field,"data.x"),e.strictEqual(t.errors[0].message,"is the wrong type"),e.ok(t({x:1,y:"value"}),"should be invalid"),e.end()}),tape("additional props",function(e){var t=validator({type:"object",additionalProperties:!1},{verbose:!0});e.ok(t({})),e.notOk(t({foo:"bar"})),e.ok("data.foo"===t.errors[0].value,"should output the property not allowed in verbose mode"),e.strictEqual(t.errors[0].type,"object","error object should contain the type"),e.end()}),tape("array",function(e){var t=validator({type:"array",required:!0,items:{type:"string"}});e.notOk(t({}),"wrong type"),e.notOk(t(),"is required"),e.ok(t(["test"])),e.end()}),tape("nested array",function(e){var t=validator({type:"object",properties:{list:{type:"array",required:!0,items:{type:"string"}}}});e.notOk(t({}),"is required"),e.ok(t({list:["test"]})),e.notOk(t({list:[1]})),e.end()}),tape("enum",function(e){var t=validator({type:"object",properties:{foo:{type:"number",required:!0,"enum":[42]}}});e.notOk(t({}),"is required"),e.ok(t({foo:42})),e.notOk(t({foo:43})),e.end()}),tape("minimum/maximum",function(e){var t=validator({type:"object",properties:{foo:{type:"number",minimum:0,maximum:0}}});e.notOk(t({foo:-42})),e.ok(t({foo:0})),e.notOk(t({foo:42})),e.end()}),tape("exclusiveMinimum/exclusiveMaximum",function(e){var t=validator({type:"object",properties:{foo:{type:"number",minimum:10,maximum:20,exclusiveMinimum:!0,exclusiveMaximum:!0}}});e.notOk(t({foo:10})),e.ok(t({foo:11})),e.notOk(t({foo:20})),e.ok(t({foo:19})),e.end()}),tape("custom format",function(e){var t=validator({type:"object",properties:{foo:{type:"string",format:"as"}}},{formats:{as:/^a+$/}});e.notOk(t({foo:""}),"not as"),e.notOk(t({foo:"b"}),"not as"),e.notOk(t({foo:"aaab"}),"not as"),e.ok(t({foo:"a"}),"as"),e.ok(t({foo:"aaaaaa"}),"as"),e.end()}),tape("custom format function",function(e){var t=validator({type:"object",properties:{foo:{type:"string",format:"as"}}},{formats:{as:function(e){return/^a+$/.test(e)}}});e.notOk(t({foo:""}),"not as"),e.notOk(t({foo:"b"}),"not as"),e.notOk(t({foo:"aaab"}),"not as"),e.ok(t({foo:"a"}),"as"),e.ok(t({foo:"aaaaaa"}),"as"),e.end()}),tape("do not mutate schema",function(e){var t={items:[{}],additionalItems:{type:"integer"}},r=JSON.parse(JSON.stringify(t));validator(t),e.same(t,r,"did not mutate"),e.end()}),tape("#toJSON()",function(e){var t={required:!0,type:"object",properties:{hello:{type:"string",required:!0}}},r=validator(t);e.deepEqual(r.toJSON(),t,"should return original schema"),e.end()}),tape("external schemas",function(e){var t={type:"string"},r={required:!0,$ref:"#ext"},o=validator(r,{schemas:{ext:t}});e.ok(o("hello string"),"is a string"),e.notOk(o(42),"not a string"),e.end()}),tape("external schema URIs",function(e){var t={type:"string"},r={required:!0,$ref:"http://example.com/schemas/schemaURIs"},o={schemas:{}};o.schemas["http://example.com/schemas/schemaURIs"]=t;var a=validator(r,o);e.ok(a("hello string"),"is a string"),e.notOk(a(42),"not a string"),e.end()}),tape("top-level external schema",function(e){var t={string:{type:"string"},sex:{type:"string","enum":["male","female","other"]}},r={type:"object",properties:{name:{$ref:"definitions.json#/string"},sex:{$ref:"definitions.json#/sex"}},required:["name","sex"]},o=validator(r,{schemas:{"definitions.json":t}});e.ok(o({name:"alice",sex:"female"}),"is an object"),e.notOk(o({name:"alice",sex:"bob"}),"recognizes external schema"),e.notOk(o({name:2,sex:"female"}),"recognizes external schema"),e.end()}),tape("nested required array decl",function(e){var t={properties:{x:{type:"object",properties:{y:{type:"object",properties:{z:{type:"string"}},required:["z"]}}}},required:["x"]},r=validator(t);e.ok(r({x:{}}),"should be valid"),e.notOk(r({}),"should not be valid"),e.strictEqual(r.errors[0].field,"data.x","should output the missing field"),e.end()}),tape("verbose mode",function(e){var t={required:!0,type:"object",properties:{hello:{required:!0,type:"string"}}},r=validator(t,{verbose:!0});e.ok(r({hello:"string"}),"should be valid"),e.notOk(r({hello:100}),"should not be valid"),e.strictEqual(r.errors[0].value,100,"error object should contain the invalid value"),e.strictEqual(r.errors[0].type,"string","error object should contain the type"),e.end()}),tape("additional props in verbose mode",function(e){var t={type:"object",required:!0,additionalProperties:!1,properties:{foo:{type:"string"},"hello world":{type:"object",required:!0,additionalProperties:!1,properties:{foo:{type:"string"}}}}},r=validator(t,{verbose:!0});r({"hello world":{bar:"string"}}),e.strictEqual(r.errors[0].value,'data["hello world"].bar',"should output the path to the additional prop in the error"),e.end()}),tape("Date.now() is an integer",function(e){var t={type:"integer"},r=validator(t);e.ok(r(Date.now()),"is integer"),e.end()}),tape("field shows item index in arrays",function(e){var t={type:"array",items:{type:"array",items:{properties:{foo:{type:"string",required:!0}}}}},r=validator(t);r([[{foo:"test"},{foo:"test"}],[{foo:"test"},{baz:"test"}]]),e.strictEqual(r.errors[0].field,"data.1.1.foo","should output the field with specific index of failing item in the error"),e.end()});