var assert=require("assert-plus"),crypto=require("crypto"),sshpk=require("sshpk"),utils=require("./utils"),HASH_ALGOS=utils.HASH_ALGOS,PK_ALGOS=utils.PK_ALGOS,InvalidAlgorithmError=utils.InvalidAlgorithmError,HttpSignatureError=utils.HttpSignatureError,validateAlgorithm=utils.validateAlgorithm;module.exports={verifySignature:function(r,e){assert.object(r,"parsedSignature"),("string"==typeof e||Buffer.isBuffer(e))&&(e=sshpk.parseKey(e)),assert.ok(sshpk.Key.isKey(e,[1,1]),"pubkey must be a sshpk.Key");var t=validateAlgorithm(r.algorithm);if("hmac"===t[0]||t[0]!==e.type)return!1;var a=e.createVerify(t[1]);return a.update(r.signingString),a.verify(r.params.signature,"base64")},verifyHMAC:function(r,e){assert.object(r,"parsedHMAC"),assert.string(e,"secret");var t=validateAlgorithm(r.algorithm);if("hmac"!==t[0])return!1;var a=t[1].toUpperCase(),i=crypto.createHmac(a,e);i.update(r.signingString);var s=crypto.createHmac(a,e);s.update(i.digest()),s=s.digest();var u=crypto.createHmac(a,e);return u.update(new Buffer(r.params.signature,"base64")),u=u.digest(),"string"==typeof s?s===u:Buffer.isBuffer(s)&&!s.equals?s.toString("binary")===u.toString("binary"):s.equals(u)}};