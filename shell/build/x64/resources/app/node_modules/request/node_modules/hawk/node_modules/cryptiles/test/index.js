var Code=require("code"),Cryptiles=require(".."),Lab=require("lab"),internals={},lab=exports.lab=Lab.script(),describe=lab.describe,it=lab.it,expect=Code.expect;describe("randomString()",function(){it("should generate the right length string",function(e){for(var i=1;1e3>=i;++i)expect(Cryptiles.randomString(i).length).to.equal(i);e()}),it("returns an error on invalid bits size",function(e){expect(Cryptiles.randomString(1e20).message).to.match(/Failed generating random bits/),e()})}),describe("randomBits()",function(){it("returns an error on invalid input",function(e){expect(Cryptiles.randomBits(0).message).to.equal("Invalid random bits count"),e()})}),describe("fixedTimeComparison()",function(){var e=Cryptiles.randomString(5e4),i=Cryptiles.randomString(15e4);it("should take the same amount of time comparing different string sizes",function(t){var r=Date.now();Cryptiles.fixedTimeComparison(i,e);var n=Date.now()-r;r=Date.now(),Cryptiles.fixedTimeComparison(i,i);var o=Date.now()-r;expect(o-n).to.be.within(-20,20),t()}),it("should return true for equal strings",function(i){expect(Cryptiles.fixedTimeComparison(e,e)).to.equal(!0),i()}),it("should return false for different strings (size, a < b)",function(i){expect(Cryptiles.fixedTimeComparison(e,e+"x")).to.equal(!1),i()}),it("should return false for different strings (size, a > b)",function(i){expect(Cryptiles.fixedTimeComparison(e+"x",e)).to.equal(!1),i()}),it("should return false for different strings (size, a = b)",function(i){expect(Cryptiles.fixedTimeComparison(e+"x",e+"y")).to.equal(!1),i()}),it("should return false when not a string",function(e){expect(Cryptiles.fixedTimeComparison("x",null)).to.equal(!1),e()}),it("should return false when not a string (left)",function(e){expect(Cryptiles.fixedTimeComparison(null,"x")).to.equal(!1),e()})});