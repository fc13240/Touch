function PseudoMap(e){if(!(this instanceof PseudoMap))throw new TypeError("Constructor PseudoMap requires 'new'");if(this.clear(),e)if(e instanceof PseudoMap||"function"==typeof Map&&e instanceof Map)e.forEach(function(e,t){this.set(t,e)},this);else{if(!Array.isArray(e))throw new TypeError("invalid argument");e.forEach(function(e){this.set(e[0],e[1])},this)}}function same(e,t){return e===t||e!==e&&t!==t}function Entry(e,t,o){this.key=e,this.value=t,this._index=o}function find(e,t){for(var o=0,r="_"+t,a=r;hasOwnProperty.call(e,a);a=r+o++)if(same(e[a].key,t))return e[a]}function set(e,t,o){for(var r=0,a="_"+t,n=a;hasOwnProperty.call(e,n);n=a+r++)if(same(e[n].key,t))return void(e[n].value=o);e.size++,e[n]=new Entry(t,o,n)}var hasOwnProperty=Object.prototype.hasOwnProperty;module.exports=PseudoMap,PseudoMap.prototype.forEach=function(e,t){t=t||this,Object.keys(this._data).forEach(function(o){"size"!==o&&e.call(t,this._data[o].value,this._data[o].key)},this)},PseudoMap.prototype.has=function(e){return!!find(this._data,e)},PseudoMap.prototype.get=function(e){var t=find(this._data,e);return t&&t.value},PseudoMap.prototype.set=function(e,t){set(this._data,e,t)},PseudoMap.prototype.delete=function(e){var t=find(this._data,e);t&&(delete this._data[t._index],this._data.size--)},PseudoMap.prototype.clear=function(){var e=Object.create(null);e.size=0,Object.defineProperty(this,"_data",{value:e,enumerable:!1,configurable:!0,writable:!1})},Object.defineProperty(PseudoMap.prototype,"size",{get:function(){return this._data.size},set:function(){},enumerable:!0,configurable:!0}),PseudoMap.prototype.values=PseudoMap.prototype.keys=PseudoMap.prototype.entries=function(){throw new Error("iterators are not implemented in this version")};